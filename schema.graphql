type AssetEntity @entity {
  id: ID!
  assetId: BigInt!
  uniswapPool: Bytes # address
  totalSupply: BigInt! # uint256
  totalBorrow: BigInt! # uint256
  sqrtTotalSupply: BigInt!
  sqrtTotalBorrow: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type VaultEntity @entity {
  id: ID! # vaultId.toString()
  vaultId: BigInt! # uint256
  owner: Bytes! # address
  margin: BigInt! # int256
  isMainVault: Boolean! # bool
  isClosed: Boolean! # bool
  openPositions: [OpenPositionEntity!]! @derivedFrom(field: "vault")
}

type OpenPositionEntity @entity {
  id: ID!
  vault: VaultEntity!
  assetId: BigInt!
  tradeAmount: BigInt! # int256
  sqrtTradeAmount: BigInt! # int256
  entryValue: BigInt! # int256
  sqrtEntryValue: BigInt! # int256
  sqrtRebalanceEntryValueStable: BigInt! # int256
  sqrtRebalanceEntryValueUnderlying: BigInt! # int256
  feeAmount: BigInt! # int256
  createdAt: BigInt!
  updatedAt: BigInt!
}

enum Action {
  POSITION
  MARGIN
  LIQUIDATION
  FEE
}

enum Product {
  PERP
  SQRT
}

type TradeHistoryItem @entity {
  id: ID! # txHash
  vault: VaultEntity!
  assetId: BigInt
  action: Action!
  product: Product
  size: BigInt
  entryValue: BigInt
  payoff: BigInt!
  txHash: String!
  createdAt: BigInt!
}

enum StrategyAction {
  DEPOSIT
  WITHDRAW
}

type StrategyUserHistoryItem @entity {
  id: ID!
  address: Bytes!
  action: StrategyAction!
  account: Bytes! # address
  strategyAmount: BigInt!
  marginAmount: BigInt!
  txHash: String!
  createdAt: BigInt!
}

type UniFeeGrowthHourly @entity {
  id: ID! # yyyy-MM-dd
  address: Bytes!
  feeGrowthGlobal0X128: BigInt!
  feeGrowthGlobal1X128: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

enum Interval {
  HOURLY
  DAILY
}

type AggregatedUniswapPriceEntity @entity {
  id: ID!
  address: Bytes!
  interval: Interval!
  openTimestamp: BigInt!
  closeTimestamp: BigInt!
  openPrice: BigInt!
  closePrice: BigInt!
}
